stages:
  - unlock
  - download
  - process
  - deploy

# Manual job to unlock Terraform state if needed (run when state is locked)
unlock_terraform_state:
  stage: unlock
  image: curlimages/curl:latest
  script:
    - echo "Unlocking Terraform state via GitLab API..."
    - |
      curl --request DELETE --header "PRIVATE-TOKEN: ${CI_JOB_TOKEN}" \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/production/lock"
    - echo "State unlock attempted. If the lock persists, manually unlock via GitLab UI at Infrastructure â†’ Terraform States"
  when: manual
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'

variables:
  LISTS_DIR: "lists"
  OUTPUT_FILE: "output.txt"
  PYTHON_VERSION: "3.11"
  TERRAFORM_VERSION: "1.6.0"

# Download blocklists
download_lists:
  stage: download
  image: python:${PYTHON_VERSION}-slim
  script:
    - echo "Downloading blocklists..."
    - python helpers/downloader.py --output_dir ${LISTS_DIR}
  artifacts:
    paths:
      - ${LISTS_DIR}/*.txt
    expire_in: 24 hours
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# Process and deduplicate lists
process_lists:
  stage: process
  image: python:${PYTHON_VERSION}-slim
  dependencies:
    - download_lists
  script:
    - echo "Processing and deduplicating blocklists..."
    - python helpers/processor.py ${LISTS_DIR} --out ${OUTPUT_FILE}
    - echo "Processed list contains $(wc -l < ${OUTPUT_FILE}) domains"
  artifacts:
    paths:
      - ${OUTPUT_FILE}
    expire_in: 24 hours
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# Deploy to Cloudflare Zero Trust using Terraform
deploy_to_cloudflare:
  stage: deploy
  image: 
    name: hashicorp/terraform:${TERRAFORM_VERSION}
    entrypoint: [""]
  dependencies:
    - process_lists
  before_script:
    - terraform --version
    - terraform init 
        -backend-config="address=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/production"
        -backend-config="lock_address=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/production/lock"
        -backend-config="unlock_address=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/production/lock"
        -backend-config="username=gitlab-ci-token"
        -backend-config="password=${CI_JOB_TOKEN}"
        -backend-config="lock_method=POST"
        -backend-config="unlock_method=DELETE"
        -backend-config="retry_wait_min=5"
  script:
    - echo "Validating Terraform configuration..."
    - terraform validate
    - echo "Destroying existing DNS architecture (if any)..."
    - terraform destroy -auto-approve
        -var="cf_api_key=${CF_API_TOKEN}"
        -var="cf_acct_id=${CF_ACCOUNT_ID}"
        -var="TF_ROOT=${CI_PROJECT_DIR}" || echo "No existing infrastructure to destroy"
    - echo "Planning new Terraform deployment..."
    - terraform plan
        -var="cf_api_key=${CF_API_TOKEN}"
        -var="cf_acct_id=${CF_ACCOUNT_ID}"
        -var="TF_ROOT=${CI_PROJECT_DIR}"
        -out=tfplan
    - echo "Applying Terraform changes..."
    - terraform apply -auto-approve tfplan
  artifacts:
    paths:
      - tfplan
    expire_in: 24 hours
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "master"'